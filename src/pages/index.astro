---
import Layout from "../layouts/Layout.astro";
import InfiniteScrollingBackground from "../components/InfiniteScrollingBackground.astro";
import { pictures } from "../types/imagePaths";
import { Image } from "astro:assets";
const pos = [
  {
    marginTop: 0,
    heights: ["20vh", "40vh", "60vh"],
  },
  {
    marginTop: 20,
    heights: ["20vh", "40vh"],
  },
  {
    marginTop: 40,
    heights: ["20vh"],
  },
];
---

<Layout title="Welcome to Astro.">
  <div class="frame">
    <div class="frame_line" data-line-1></div>
    <div class="frame_line" data-line-2></div>
    <div class="frame_line" data-line-3></div>
    <div class="frame_line" data-line-4></div>
  </div>
  <div id="scrollBg" style={{ overflow: "scroll", height: "100vh" }}>
    <div
      style={{
        // width: "100000px",
        height: "100%",
        display: "flex",
        flexWrap: "nowrap",
        padding: "20vh 22vh",
      }}
    >
      <!-- todo 20vh:top0-20-40vh 40vh:top-0-20 60vh -->
      <!-- 
    marginTop:0 height:20vh 40vh 60vh
    marginTop:20 height:20vh 40vh
    marginTop:40 height:20vh
     -->
      {
        pictures.reverse().map((src, idx) => (
          <div style={{ paddingRight: "20vh", zIndex: 3 }}>
            <Image
              src={src}
              class="card"
              alt="Âì¶Ë±Å"
              loading={"eager"}
              style={{
                marginTop: pos[idx % 3].marginTop + "vh",
                height:
                  pos[idx % 3].heights[
                    Math.floor(
                      Math.random() * ((40 - pos[idx % 3].marginTop) / 20)
                    )
                  ],
              }}
            />
          </div>
        ))
      }
    </div>
  </div>
  <InfiniteScrollingBackground />
  <div class="loading">
    <div></div>
    <div>The Images are loading...</div>
    <div>0/19</div>
  </div>
</Layout>

<style>
  .card {
    /* height: 40vh; */
    width: fit-content;
    widows: auto;
    object-fit: contain;
    /* opacity: 0; */
    border: 4px solid black;
    border-radius: 20px;
    display: block;
  }
  #scrollBg::-webkit-scrollbar {
    display: none;
  }
  .frame {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    pointer-events: none;
    transition-property: opacity;
    transition-duration: 1.2s;
    transition-timing-function: cubic-bezier(0.3, 0.1, 0.1, 1);
    transition-delay: 0.4s;
    opacity: 1;
  }
  .frame_line {
    position: absolute;
    left: 0;
    width: 100%;
    height: 4px;
    background-color: #000;
  }
  .frame_line[data-line-1] {
    top: calc(20% - 2px);
  }
  .frame_line[data-line-2] {
    top: calc(40% - 2px);
  }
  .frame_line[data-line-3] {
    top: calc(60% - 2px);
  }
  .frame_line[data-line-4] {
    top: calc(80% - 2px);
  }
  .gallery_wrap {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
  }
  .gallery_list {
    height: 100%;
    will-change: transform;
  }
  .loading {
    position: absolute;
    left: 0;
    top: 0;
    background: black;
    height: 100%;
    width: 100vw;
    z-index: 4;
    color: white;
    opacity: 1;
    transition: all 1s ease-in-out;
    & > :nth-child(1) {
      background-color: #fff;
      height: 10vh;
      transform-origin: 0 0;
      transform: scaleX(0);
    }
    & > :nth-child(2) {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%);
      font-size: 25px;
    }
    & > :nth-child(3) {
      position: absolute;
      bottom: 10px;
      left: 10px;
      font-size: 50px;
    }
  }
  .loading-hidden {
    /* opacity: 0; */
    transform: translateY(-100%);
  }
</style>

<script type="module">
  const images = document.querySelectorAll("img");
  const loadDiv = document.querySelector(".loading");
  const progressBar = loadDiv?.children[0];
  const progressNumber = loadDiv?.children[2];

  let _loadedImagesCount = 0; // ÁßÅÊúâÂèòÈáèÔºå‰∏çÁõ¥Êé•‰øÆÊîπ
  const totalImagesCount = images.length;

  let curCount = 0;
  function easeOutQuad(t) {
    return -(Math.cos(Math.PI * t) - 1) / 2;
  }
  function setNewPercentage(count) {
    curCount = count;
    const duration = 200; // Âä®ÁîªÊåÅÁª≠Êó∂Èó¥‰∏∫500ÊØ´Áßí
    const start = performance.now(); // Âä®ÁîªÂºÄÂßãÊó∂Èó¥
    const prevPercentage = (count - 1) / totalImagesCount;
    const newPercentage = count / totalImagesCount;
    function animate(time) {
      let timeFraction = (time - start) / duration;
      if (timeFraction > 1) timeFraction = 1; // Á°Æ‰øùÊó∂Èó¥ÂàÜÊï∞‰∏çË∂ÖËøá1
      const easedTimeFraction = easeOutQuad(timeFraction);
      const currentPercentage =
        prevPercentage + (newPercentage - prevPercentage) * easedTimeFraction; // ËÆ°ÁÆóÂΩìÂâçÁôæÂàÜÊØî
      progressBar.style.transform = `scaleX(${currentPercentage})`; // Â∫îÁî®ÂΩìÂâçÁôæÂàÜÊØî

      if (count >= curCount && timeFraction < 1) {
        requestAnimationFrame(animate); // Â¶ÇÊûúÊó∂Èó¥ÂàÜÊï∞Â∞è‰∫é1ÔºåÁªßÁª≠Âä®Áîª
      }
    }
    id = requestAnimationFrame(animate); // ÂºÄÂßãÂä®Áîª
    // cancelAnimationFrame(id)
  }

  function updateLoadingStatus() {
    if (progressBar) {
      setNewPercentage(_loadedImagesCount);
    }
    // Êõ¥Êñ∞ÊòæÁ§∫ÁöÑÊñáÊú¨ËøõÂ∫¶
    if (progressNumber) {
      progressNumber.textContent = `${_loadedImagesCount}/${totalImagesCount}`;
    }

    // Ê£ÄÊü•ÊòØÂê¶ÊâÄÊúâÂõæÁâáÈÉΩÂ∑≤Âä†ËΩΩ
    if (_loadedImagesCount === totalImagesCount) {
      setTimeout(allImagesLoadedCallback,200)
    }
  }

  function incrementLoadedImagesCount() {
    _loadedImagesCount++;
    updateLoadingStatus();
  }

  function allImagesLoadedCallback() {
    // loadDiv.textContent = `‰∏çÂêÉË•øÁ∫¢ÊüøüçÖÁöÑÁîªÂªä`;
    loadDiv?.animate([], {});
    loadDiv?.classList.add("loading-hidden");
    images.forEach((image) => {
      image.removeEventListener("load", incrementLoadedImagesCount);
    });
    setTimeout(() => {
      loadDiv.style.display = "none";
    }, 1000);
    // add Transtion Âä®Áîª
    // loadDiv.style.display = "none"; // Â¶ÇÊûú‰Ω†ÊÉ≥ÈöêËóèÂä†ËΩΩÊèêÁ§∫ÔºåÂèñÊ∂àÊ≥®ÈáäËøôË°å‰ª£Á†Å
  }

  // ÂàùÂßãÂåñÂä†ËΩΩÁä∂ÊÄÅ
  updateLoadingStatus();

  images.forEach((img) => {
    if (img.complete) {
      incrementLoadedImagesCount();
      console.log("Image already loaded: ü§¶‚Äç‚ôÇÔ∏è");
    } else {
      img.addEventListener("load", incrementLoadedImagesCount);
      img.addEventListener("error", incrementLoadedImagesCount);
    }
  });
</script>
